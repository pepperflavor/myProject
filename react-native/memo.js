/*
    react-native 설치 명령어
    ===============================================================
        npx create-expo-app 프로젝트생성할 폴더명
    ===============================================================
    자동으로 react-dom도 깔림
    react-native는 디바이스에 맞는 형태로 컴파일을 해준다. 그렇기 때문에 
    dom을 갖고 있지 않기 때문에 web요소인 html 태그를 사용할 수 없다
    그래서 text, View가 핵심ㅋ 컴포넌트이다
    CSS 작성이 불가능함 => 대신 컴포넌트 프로퍼티 또는 style을 적용함, 또는 style sheet 객체
    1. 인라인 스타일을 추가해서 스타일객체를 프로퍼티로 전달
    2. 별도의 객체로 정의해서 프로퍼티로 전달
    - app.js가 유일한 컴포넌트임
*/

/* 
    view 는 웹앱의 div와 유사하지만 일반적으로 콘텐츠를 담는 상자나 컨테이너 구축에 사용된다
    즉 직접 텍스트를 담을 수는 없다
*/

/*  핵심 컴포넌트
    - <view> :  다른 컴포넌트를 담고 배치하는 컴포넌트
    - <text> : 텍스트를 표시해줌
    // %는 문자열로 지정해야한다

    - <Button> : style 을 입력할 수 없다
        +) onClick() == onPress()
    - <ScrollView> : 스크롤할 수 있게 명시해준다. 스크롤 가능한 영역은 부모 요소가 결정한다. 화면이상의 자식항목들을 모두 랜더링 하기 때문에 양이 많다면 효율적이지 않다. 앱이 느려질거임 기사같은 랜더링할 내용이 한계가 있는건 ㄱㅊ 벋뜨 동적목록에는 쓰지 않는게 좋음

    - <FlatList> :  화면에 보일만큼만 랜더링해줌, 화면 밖의 항목은 사용자가 스크롤해야 랜더링함
        +) data={} : 랜더링할 데이터
           ** data 와 짝궁임 renderItem={} : 지정한 데이터를 어떻게 랜더링 할 것인지 표기해야함 
                ex) (data) =>{<view>{data.item}</view>}
            keyExtractor : 모든 항목에서 키를 가져오려고 호출하는 함수, 유니크한 값중에 키로 사용할 걸 지정해줘야함

    - <Pressable> : 이 컴포넌트로 싸면 터치할 수 있게 해줌 onPress가 기본적으로 적용되기 때문에 onPress에 적용할 함수도 지정해줘야함



    bind() :  어떤 함수를 실행한 후에 실행할 함수를 지정해 줄 수 있다
*/

/*  FLEXBOX - 컨테이너에 적용하는 요소/ style 
    - flex : 확장할 공간을 지시, 공간을 차지할 수 도 있는 다른 컨테이너를 고려하여 확장, 주변컨테이너에서 모든 요소가 콘텐츠를 넣을 공간을 제한 후 // flex를 감싼 부모가 차지한 공간을 먼저 설정해줘야 flex를 가진 자식요소들이 그만큼 공간을 나눠갖는다
    flexDirection : 요소를 배치할 방향 세로(column)/가로(row)
    justifyContent : 'space-between'
*/